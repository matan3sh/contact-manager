{"version":3,"sources":["store/reducer.js","store/index.js","services/db.js","services/storageService.js","services/contactService.js","store/actions.js","components/contact/ContactPreview.jsx","components/contact/ContactList.jsx","components/contact/ContactEdit.jsx","components/contact/ContactAdd.jsx","components/pages/ContactApp.jsx","App.js","serviceWorker.js","index.js"],"names":["initialState","contacts","rootReducer","combineReducers","contactApp","state","action","type","payload","store","createStore","composeWithDevTools","applyMiddleware","thunk","gDefaultContacts","id","name","role","address","company","phone","img","getDefaultData","key","value","localStorage","JSON","stringify","load","defaultValue","parse","query","Promise","resolve","gContacts","remove","idx","findIndex","contact","splice","storageService","KEY","save","_contact","length","txt","possible","i","charAt","Math","floor","random","_makeId","unshift","saveContact","dispatch","contactService","then","savedContact","console","log","err","defaultData","db","_createContacts","ContactPreview","lat","lng","getCoords","a","geocodeByAddress","results","getLatLng","latLng","setState","this","props","onDelete","onEdit","className","src","alt","toFixed","onClick","React","Component","ContactList","onAdd","map","Modal","setAppElement","ContactEdit","companyName","companyAddress","companyPhone","onChange","target","field","onSumbit","e","preventDefault","updatedContact","onClose","openModal","isOpen","onRequestClose","overlayClassName","onSubmit","placeholder","mapDispatchToProps","connect","newContact","ContactApp","currContact","removeContact","forceUpdate","loadContacts","ContactAdd","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"0PAAMA,EAAe,CACnBC,SAAU,ICKZ,IAAMC,EAAcC,0BAAgB,CAClCC,WDHa,WAAgD,IAA/BC,EAA8B,uDAAtBL,EAAcM,EAAQ,uCAC5D,OAAQA,EAAOC,MACb,IAAK,eACH,OAAO,2BACFF,GADL,IAEEJ,SAAUK,EAAOE,UAErB,QACE,OAAOH,MCGEI,EALDC,sBACZR,EACAS,8BAAoBC,0BAAgBC,O,oDCZhCC,EAAmB,CACvB,CACEC,GAAI,eACJC,KAAM,aACNC,KAAM,oBACNC,QAAS,uBACTC,QAAS,CACPH,KAAM,eACNE,QAAS,oDACTE,MAAO,iBAETC,IACE,8FAEJ,CACEN,GAAI,cACJC,KAAM,gBACNC,KAAM,MACNC,QAAS,uBACTC,QAAS,CACPH,KAAM,eACNE,QAAS,oDACTE,MAAO,iBAETC,IACE,iGAEJ,CACEN,GAAI,cACJC,KAAM,eACNC,KAAM,oBACNC,QAAS,uBACTC,QAAS,CACPH,KAAM,eACNE,QAAS,oDACTE,MAAO,iBAETC,IACE,gGAEJ,CACEN,GAAI,cACJC,KAAM,iBACNC,KAAM,gBACNC,QAAS,uBACTC,QAAS,CACPH,KAAM,eACNE,QAAS,oDACTE,MAAO,iBAETC,IACE,kGAEJ,CACEN,GAAI,cACJC,KAAM,eACNC,KAAM,oBACNC,QAAS,uBACTC,QAAS,CACPH,KAAM,eACNE,QAAS,oDACTE,MAAO,iBAETC,IACE,gGAEJ,CACEN,GAAI,cACJC,KAAM,eACNC,KAAM,oBACNC,QAAS,uBACTC,QAAS,CACPH,KAAM,eACNE,QAAS,oDACTE,MAAO,iBAETC,IACE,kGAQS,OACbC,eALF,WACE,OAAOR,ICxEM,OACbL,MAXF,SAAec,EAAKC,GAClBC,aAAaF,GAAOG,KAAKC,UAAUH,IAWnCI,KARF,SAAcL,GAA2B,IAAtBM,EAAqB,uDAAN,KAC5BL,EAAQC,aAAaF,GACzB,OAAKC,EACOE,KAAKI,MAAMN,GADJK,ICHN,GACbE,MAeF,WACE,OAAOC,QAAQC,QAAQC,IAfvBC,OAkBF,SAAgBpB,GACd,IAAMqB,EAAMF,EAAUG,WAAU,SAACC,GAAD,OAAaA,EAAQvB,KAAOA,KAG5D,OAFAmB,EAAUK,OAAOH,EAAK,GACtBI,EAAe/B,MAAMgC,EAAKP,GACnBF,QAAQC,WArBfS,KAwBF,SAAcJ,GACZ,GAAIA,EAAQvB,GAAI,CACd,IAAMqB,EAAMF,EAAUG,WAAU,SAACM,GAAD,OAAcA,EAAS5B,KAAOuB,EAAQvB,MACtEmB,EAAUK,OAAOH,EAAK,EAAGE,QAEzBA,EAAQvB,GASZ,WAIE,IAJ6B,IAAd6B,EAAa,uDAAJ,GACpBC,EAAM,GACNC,EACF,iEACOC,EAAI,EAAGA,EAAIH,EAAQG,IAC1BF,GAAOC,EAASE,OAAOC,KAAKC,MAAMD,KAAKE,SAAWL,EAASF,SAE7D,OAAOC,EAhBQO,GACbd,EAAQjB,IACN,yEACFa,EAAUmB,QAAQf,GAGpB,OADAE,EAAe/B,MAAMgC,EAAKP,GACnBF,QAAQC,QAAQK,KAhCnBG,EAAM,WACRP,EAAY,KCkBT,SAASoB,EAAYhB,GAC1B,OAAO,SAACiB,GACN,IAAMhD,EAAO+B,EAAQvB,GAAK,iBAAmB,cAC7C,IACEwC,EAAS,CAAEhD,OAAMC,QAAS8B,IAC1BkB,EACGd,KAAKJ,GACLmB,MAAK,SAACC,GAAD,OAAkBC,QAAQC,IAAIF,MACtC,MAAOG,GACPF,QAAQC,IAAIC,MDxBlB,WACE,IAAMC,EAAcC,EAAGzC,iBACvBY,EAAYM,EAAeZ,KAAKa,EAAKqB,GACrCtB,EAAe/B,MAAMgC,EAAKP,GAL5B8B,G,YE+CeC,E,4MAtDb5D,MAAQ,CAAE6D,IAAK,KAAMC,IAAK,M,EAM1BC,U,uCAAY,WAAOlD,GAAP,iBAAAmD,EAAA,sEACYC,2BAAiBpD,GAD7B,cACJqD,EADI,gBAEWC,oBAAUD,EAAQ,IAF7B,OAEJE,EAFI,OAGV,EAAKC,SAAS,CAAER,IAAKO,EAAOP,IAAKC,IAAKM,EAAON,MAHnC,2C,wHAHVQ,KAAKP,UAAUO,KAAKC,MAAMtC,QAAQnB,QAAQD,W,+BASlC,IAAD,EAC+ByD,KAAKC,MAAnCtC,EADD,EACCA,QAASuC,EADV,EACUA,SAAUC,EADpB,EACoBA,OAC3B,OACE,yBAAKC,UAAU,kBACb,yBAAKA,UAAU,aACb,yBAAKC,IAAK1C,EAAQjB,IAAK4D,IAAI,kBAC3B,2BAAI3C,EAAQrB,OAEd,yBAAK8D,UAAU,cACb,4BAAKzC,EAAQtB,MACb,yBAAK+D,UAAU,mBACb,uBAAGA,UAAU,0BAA6B,IAC1C,8BAAOzC,EAAQpB,SACK,OAAnByD,KAAKtE,MAAM6D,KAAmC,OAAnBS,KAAKtE,MAAM8D,IACrC,uBAAGY,UAAU,UACX,sCADF,IACqBJ,KAAKtE,MAAM6D,IAAIgB,QAAQ,GAD5C,IACgD,uCAAmB,IAChEP,KAAKtE,MAAM8D,IAAIe,QAAQ,IAG1B,IAIJ,yBAAKH,UAAU,mBACb,4BAAKzC,EAAQnB,QAAQH,MACrB,2BAAIsB,EAAQnB,QAAQD,SACpB,oCAAUoB,EAAQnB,QAAQC,QAE5B,yBAAK2D,UAAU,eACb,0BAAMI,QAAS,kBAAML,EAAOxC,KAC1B,uBAAGyC,UAAU,gBAEf,0BAAMI,QAAS,kBAAMN,EAASvC,EAAQvB,MACpC,uBAAGgE,UAAU,qC,GA9CEK,IAAMC,WCkBpBC,EAlBK,SAAC,GAA2C,IAAzCrF,EAAwC,EAAxCA,SAAU4E,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,OAAQS,EAAY,EAAZA,MACjD,OACE,yBAAKR,UAAU,aACZ9E,EAASuF,KAAI,SAAClD,GAAD,OACZ,kBAAC,EAAD,CACEA,QAASA,EACTf,IAAKe,EAAQvB,GACb8D,SAAUA,EACVC,OAAQA,OAGZ,4BAAQC,UAAU,UAAUI,QAAS,kBAAMI,MACzC,uBAAGR,UAAU,gC,mCCPrBU,IAAMC,cAAc,S,IAEdC,E,4MACJtF,MAAQ,CACNW,KAAM,EAAK4D,MAAMtC,QAAQtB,KACzBC,KAAM,EAAK2D,MAAMtC,QAAQrB,KACzBC,QAAS,EAAK0D,MAAMtC,QAAQpB,QAC5B0E,YAAa,EAAKhB,MAAMtC,QAAQnB,QAAQH,KACxC6E,eAAgB,EAAKjB,MAAMtC,QAAQnB,QAAQD,QAC3C4E,aAAc,EAAKlB,MAAMtC,QAAQnB,QAAQC,O,EAG3C2E,SAAW,YAAiB,IAAdC,EAAa,EAAbA,OACNC,EAAQD,EAAOhF,KACfQ,EAAwB,WAAhBwE,EAAOzF,MAAqByF,EAAOxE,MAAQwE,EAAOxE,MAChE,EAAKkD,SAAL,eAAiBuB,EAAQzE,K,EAG3B0E,SAAW,SAACC,GACVA,EAAEC,iBADc,MASZ,EAAK/F,MANPW,EAHc,EAGdA,KACAC,EAJc,EAIdA,KACAC,EALc,EAKdA,QACA0E,EANc,EAMdA,YACAC,EAPc,EAOdA,eACAC,EARc,EAQdA,aAEIO,EAAiB,CACrBtF,GAAI,EAAK6D,MAAMtC,QAAQvB,GACvBC,OACAC,OACAC,UACAC,QAAS,CACPH,KAAM4E,EACN1E,QAAS2E,EACTzE,MAAO0E,GAETzE,IAAK,EAAKuD,MAAMtC,QAAQjB,KAE1B,EAAKuD,MAAMtB,YAAY+C,GACvB,EAAKzB,MAAM0B,W,uDAGH,IAAD,EACiC3B,KAAKC,MAArC2B,EADD,EACCA,UAAWD,EADZ,EACYA,QAAShE,EADrB,EACqBA,QADrB,EASHqC,KAAKtE,MANPW,EAHK,EAGLA,KACAC,EAJK,EAILA,KACAC,EALK,EAKLA,QACA0E,EANK,EAMLA,YACAC,EAPK,EAOLA,eACAC,EARK,EAQLA,aAEF,OACE,kBAAC,IAAD,CACEU,OAAQD,EACRE,eAAgB,kBAAMH,KACtBvB,UAAW,QACX2B,iBAAkB,WAElB,0BAAMC,SAAUhC,KAAKuB,SAAUnB,UAAU,kBACvC,yBAAKC,IAAK1C,EAAQjB,IAAK4D,IAAI,kBAC3B,2BACE1E,KAAK,OACLS,KAAK,OACL4F,YAAY,eACZpF,MAAOR,EACP+E,SAAUpB,KAAKoB,WAEjB,2BACExF,KAAK,OACLS,KAAK,OACL4F,YAAY,eACZpF,MAAOP,EACP8E,SAAUpB,KAAKoB,WAEjB,2BACExF,KAAK,OACLS,KAAK,UACL4F,YAAY,kBACZpF,MAAON,EACP6E,SAAUpB,KAAKoB,WAEjB,2BACExF,KAAK,OACLS,KAAK,cACL4F,YAAY,uBACZpF,MAAOoE,EACPG,SAAUpB,KAAKoB,WAEjB,2BACExF,KAAK,OACLS,KAAK,iBACL4F,YAAY,0BACZpF,MAAOqE,EACPE,SAAUpB,KAAKoB,WAEjB,2BACExF,KAAK,OACLS,KAAK,eACL4F,YAAY,wBACZpF,MAAOsE,EACPC,SAAUpB,KAAKoB,WAEjB,4BAAQxF,KAAK,SAASwE,UAAU,OAAhC,gB,GAvGgBM,aAgHpBwB,EAAqB,CACzBvD,eAGawD,cAAQ,KAAMD,EAAdC,CAAkCnB,GCtHjDF,IAAMC,cAAc,S,IAEdC,E,4MACJtF,MAAQ,CACNW,KAAM,GACNC,KAAM,GACNC,QAAS,GACT0E,YAAa,GACbC,eAAgB,GAChBC,aAAc,I,EAGhBC,SAAW,YAAiB,IAAdC,EAAa,EAAbA,OACNC,EAAQD,EAAOhF,KACfQ,EAAwB,WAAhBwE,EAAOzF,MAAqByF,EAAOxE,MAAQwE,EAAOxE,MAChE,EAAKkD,SAAL,eAAiBuB,EAAQzE,K,EAG3B0E,SAAW,SAACC,GACVA,EAAEC,iBADc,MASZ,EAAK/F,MACH0G,EAAa,CACjB/F,KAXc,EAGdA,KASAC,KAZc,EAIdA,KASAC,QAbc,EAKdA,QASAC,QAAS,CACPH,KAfY,EAMd4E,YAUE1E,QAhBY,EAOd2E,eAUEzE,MAjBY,EAQd0E,eAYF,EAAKlB,MAAMtB,YAAYyD,GACvB,EAAKnC,MAAM0B,W,uDAGH,IAAD,EACwB3B,KAAKC,MAA5B2B,EADD,EACCA,UAAWD,EADZ,EACYA,QADZ,EASH3B,KAAKtE,MANPW,EAHK,EAGLA,KACAC,EAJK,EAILA,KACAC,EALK,EAKLA,QACA0E,EANK,EAMLA,YACAC,EAPK,EAOLA,eACAC,EARK,EAQLA,aAEF,OACE,kBAAC,IAAD,CACEU,OAAQD,EACRE,eAAgB,kBAAMH,KACtBvB,UAAW,QACX2B,iBAAkB,WAElB,0BAAMC,SAAUhC,KAAKuB,SAAUnB,UAAU,kBACvC,yBACEC,IAAI,yEACJC,IAAI,kBAGN,2BACE1E,KAAK,OACLS,KAAK,OACL4F,YAAY,eACZpF,MAAOR,EACP+E,SAAUpB,KAAKoB,WAEjB,2BACExF,KAAK,OACLS,KAAK,OACL4F,YAAY,eACZpF,MAAOP,EACP8E,SAAUpB,KAAKoB,WAEjB,2BACExF,KAAK,OACLS,KAAK,UACL4F,YAAY,kBACZpF,MAAON,EACP6E,SAAUpB,KAAKoB,WAEjB,2BACExF,KAAK,OACLS,KAAK,cACL4F,YAAY,uBACZpF,MAAOoE,EACPG,SAAUpB,KAAKoB,WAEjB,2BACExF,KAAK,OACLS,KAAK,iBACL4F,YAAY,0BACZpF,MAAOqE,EACPE,SAAUpB,KAAKoB,WAEjB,2BACExF,KAAK,OACLS,KAAK,eACL4F,YAAY,wBACZpF,MAAOsE,EACPC,SAAUpB,KAAKoB,WAEjB,4BAAQxF,KAAK,SAASwE,UAAU,OAAhC,qB,GAzGgBM,aAkHpBwB,EAAqB,CACzBvD,eAGawD,cAAQ,KAAMD,EAAdC,CAAkCnB,GCxH3CqB,E,4MACJ3G,MAAQ,CAAEkG,WAAW,EAAOU,YAAa,M,EAMzCpC,SAAW,SAAC9D,GACV,EAAK6D,MAAMsC,cAAcnG,GACzB,EAAKoG,e,EAGPrC,OAAS,SAACxC,GACR,EAAKoC,SAAS,CAAE6B,WAAW,EAAMU,YAAa3E,K,EAGhDgE,QAAU,WACR,EAAK5B,SAAS,CAAE6B,WAAW,EAAOU,YAAa,Q,EAGjD1B,MAAQ,WACN,EAAKb,SAAS,CAAE6B,WAAW,K,4LAjBrB5B,KAAKC,MAAMwC,e,qIAoBT,IACAnH,EAAa0E,KAAKC,MAAlB3E,SADD,EAE4B0E,KAAKtE,MAAhCkG,EAFD,EAECA,UAAWU,EAFZ,EAEYA,YACnB,OACE,oCACIhH,EAAS2C,OAGT,kBAAC,EAAD,CACE3C,SAAUA,EACV4E,SAAUF,KAAKE,SACfC,OAAQH,KAAKG,OACbS,MAAOZ,KAAKY,QANd,mBASe,OAAhB0B,GACC,kBAAC,EAAD,CACEV,UAAWA,EACXD,QAAS3B,KAAK2B,QACdhE,QAAS2E,IAGb,kBAACI,EAAD,CAAYd,UAAWA,EAAWD,QAAS3B,KAAK2B,e,GA9C/BjB,aAwDnBwB,EAAqB,CACzBO,aL/DK,WACL,OAAO,SAAC7D,GACN,IACEC,EACGzB,QACA0B,MAAK,SAACxD,GAAD,OACJsD,EAAS,CAAEhD,KAAM,eAAgBC,QAASP,OAE9C,MAAO4D,GACPF,QAAQC,IAAIC,MKuDhBqD,cLlDK,SAAuBnG,GAC5B,OAAO,SAACwC,GACN,IACEC,EACGrB,OAAOpB,GACP0C,MAAK,kBAAMF,EAAS,CAAEhD,KAAM,iBAAkBC,QAASO,OAC1D,MAAO8C,GACPF,QAAQC,IAAIC,OK8CHiD,eATS,SAACzG,GAAD,MAAY,CAClCJ,SAAUI,EAAMD,WAAWH,YAQW4G,EAAzBC,CAA6CE,GCvD7CM,MARf,WACE,OACE,kBAAC,IAAD,CAAU7G,MAAOA,GACf,kBAAC,EAAD,QCGc8G,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1E,MAAK,SAAA2E,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5E,QAAQ4E,MAAMA,EAAMC,c","file":"static/js/main.b8202222.chunk.js","sourcesContent":["const initialState = {\n  contacts: []\n};\n\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    case 'SET_CONTACTS':\n      return {\n        ...state,\n        contacts: action.payload\n      };\n    default:\n      return state;\n  }\n}\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport reducer from './reducer';\n\nconst rootReducer = combineReducers({\n  contactApp: reducer\n});\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk))\n);\n\nexport default store;\n","const gDefaultContacts = [\n  {\n    id: 'GXj93KOkqZoC',\n    name: 'John Smith',\n    role: 'Graphics Designer',\n    address: 'Reviera State 32/106',\n    company: {\n      name: 'Twitter, Inc',\n      address: '795 Folsom Ave, Suite 600 San Francisco, CA 94107',\n      phone: '(123)456-7890'\n    },\n    img:\n      'https://res.cloudinary.com/dwymjj6rm/image/upload/v1593501836/TravelFactory/john-smith.jpg'\n  },\n  {\n    id: 'JYOJa2NpSCq',\n    name: 'Alex Johnatan',\n    role: 'CEO',\n    address: 'Reviera State 32/106',\n    company: {\n      name: 'Twitter, Inc',\n      address: '795 Folsom Ave, Suite 600 San Francisco, CA 94107',\n      phone: '(123)456-7890'\n    },\n    img:\n      'https://res.cloudinary.com/dwymjj6rm/image/upload/v1593501836/TravelFactory/alex_jonathan.jpg'\n  },\n  {\n    id: '1y0Oqts35DQ',\n    name: 'Monica Smith',\n    role: 'Marketing Manager',\n    address: 'Reviera State 32/106',\n    company: {\n      name: 'Twitter, Inc',\n      address: '795 Folsom Ave, Suite 600 San Francisco, CA 94107',\n      phone: '(123)456-7890'\n    },\n    img:\n      'https://res.cloudinary.com/dwymjj6rm/image/upload/v1593501836/TravelFactory/monica_smith.jpg'\n  },\n  {\n    id: 'kSnfIJyikTP',\n    name: 'Michael Zimber',\n    role: 'Sales Manager',\n    address: 'Reviera State 32/106',\n    company: {\n      name: 'Twitter, Inc',\n      address: '795 Folsom Ave, Suite 600 San Francisco, CA 94107',\n      phone: '(123)456-7890'\n    },\n    img:\n      'https://res.cloudinary.com/dwymjj6rm/image/upload/v1593501836/TravelFactory/michael_zimber.jpg'\n  },\n  {\n    id: 'f4iuVmbuKCC',\n    name: 'Sandra Smith',\n    role: 'Graphics Designer',\n    address: 'Reviera State 32/106',\n    company: {\n      name: 'Twitter, Inc',\n      address: '795 Folsom Ave, Suite 600 San Francisco, CA 94107',\n      phone: '(123)456-7890'\n    },\n    img:\n      'https://res.cloudinary.com/dwymjj6rm/image/upload/v1593501836/TravelFactory/sandra_smith.jpg'\n  },\n  {\n    id: 'U2rfZO6oBZf',\n    name: 'Janet Carton',\n    role: 'Graphics Designer',\n    address: 'Reviera State 32/106',\n    company: {\n      name: 'Twitter, Inc',\n      address: '795 Folsom Ave, Suite 600 San Francisco, CA 94107',\n      phone: '(123)456-7890'\n    },\n    img:\n      'https://res.cloudinary.com/dwymjj6rm/image/upload/v1593501836/TravelFactory/janeth_carton.jpg'\n  }\n];\n\nfunction getDefaultData() {\n  return gDefaultContacts;\n}\n\nexport default {\n  getDefaultData\n};\n","function store(key, value) {\n  localStorage[key] = JSON.stringify(value);\n}\n\nfunction load(key, defaultValue = null) {\n  var value = localStorage[key];\n  if (!value) return defaultValue;\n  else return JSON.parse(value);\n}\n\nexport default {\n  store,\n  load\n};\n","import db from './db';\nimport storageService from './storageService';\n\nexport default {\n  query,\n  remove,\n  save\n};\n\nconst KEY = 'contacts';\nvar gContacts = null;\n_createContacts();\n\nfunction _createContacts() {\n  const defaultData = db.getDefaultData();\n  gContacts = storageService.load(KEY, defaultData);\n  storageService.store(KEY, gContacts);\n}\n\nfunction query() {\n  return Promise.resolve(gContacts);\n}\n\nfunction remove(id) {\n  const idx = gContacts.findIndex((contact) => contact.id === id);\n  gContacts.splice(idx, 1);\n  storageService.store(KEY, gContacts);\n  return Promise.resolve();\n}\n\nfunction save(contact) {\n  if (contact.id) {\n    const idx = gContacts.findIndex((_contact) => _contact.id === contact.id);\n    gContacts.splice(idx, 1, contact);\n  } else {\n    contact.id = _makeId();\n    contact.img =\n      'https://cdn.pixabay.com/photo/2016/08/08/09/17/avatar-1577909_1280.png';\n    gContacts.unshift(contact);\n  }\n  storageService.store(KEY, gContacts);\n  return Promise.resolve(contact);\n}\n\nfunction _makeId(length = 11) {\n  var txt = '';\n  var possible =\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  for (var i = 0; i < length; i++) {\n    txt += possible.charAt(Math.floor(Math.random() * possible.length));\n  }\n  return txt;\n}\n","import contactService from '../services/contactService';\n\nexport function loadContacts() {\n  return (dispatch) => {\n    try {\n      contactService\n        .query()\n        .then((contacts) =>\n          dispatch({ type: 'SET_CONTACTS', payload: contacts })\n        );\n    } catch (err) {\n      console.log(err);\n    }\n  };\n}\n\nexport function removeContact(id) {\n  return (dispatch) => {\n    try {\n      contactService\n        .remove(id)\n        .then(() => dispatch({ type: 'REMOVE_CONTACT', payload: id }));\n    } catch (err) {\n      console.log(err);\n    }\n  };\n}\n\nexport function saveContact(contact) {\n  return (dispatch) => {\n    const type = contact.id ? 'UPDATE_CONTACT' : 'ADD_CONTACT';\n    try {\n      dispatch({ type, payload: contact });\n      contactService\n        .save(contact)\n        .then((savedContact) => console.log(savedContact));\n    } catch (err) {\n      console.log(err);\n    }\n  };\n}\n","import React from 'react';\nimport { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\n\nclass ContactPreview extends React.Component {\n  state = { lat: null, lng: null };\n\n  componentDidMount() {\n    this.getCoords(this.props.contact.company.address);\n  }\n\n  getCoords = async (address) => {\n    const results = await geocodeByAddress(address);\n    const latLng = await getLatLng(results[0]);\n    this.setState({ lat: latLng.lat, lng: latLng.lng });\n  };\n\n  render() {\n    const { contact, onDelete, onEdit } = this.props;\n    return (\n      <div className='card-container'>\n        <div className='card-left'>\n          <img src={contact.img} alt='contact-thumb' />\n          <p>{contact.role}</p>\n        </div>\n        <div className='card-right'>\n          <h3>{contact.name}</h3>\n          <div className='contact-address'>\n            <i className='fas fa-map-marker-alt'></i>{' '}\n            <span>{contact.address}</span>\n            {this.state.lat !== null && this.state.lng !== null ? (\n              <p className='coords'>\n                <span>Lat:</span> {this.state.lat.toFixed(2)} <span> Lng:</span>{' '}\n                {this.state.lng.toFixed(2)}\n              </p>\n            ) : (\n              ''\n            )}\n          </div>\n\n          <div className='company-address'>\n            <h4>{contact.company.name}</h4>\n            <p>{contact.company.address}</p>\n            <span>P: {contact.company.phone}</span>\n          </div>\n          <div className='edit-delete'>\n            <span onClick={() => onEdit(contact)}>\n              <i className='fas fa-pen'></i>\n            </span>\n            <span onClick={() => onDelete(contact.id)}>\n              <i className='fas fa-trash-alt pointer'></i>\n            </span>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ContactPreview;\n","import React from 'react';\nimport ContactPreview from './ContactPreview';\n\nconst ContactList = ({ contacts, onDelete, onEdit, onAdd }) => {\n  return (\n    <div className='container'>\n      {contacts.map((contact) => (\n        <ContactPreview\n          contact={contact}\n          key={contact.id}\n          onDelete={onDelete}\n          onEdit={onEdit}\n        />\n      ))}\n      <button className='add-btn' onClick={() => onAdd()}>\n        <i className='fas fa-plus-square fa-5x'></i>\n      </button>\n    </div>\n  );\n};\n\nexport default ContactList;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { saveContact } from '../../store/actions';\nimport Modal from 'react-modal';\n\nimport 'slick-carousel/slick/slick.css';\nimport 'slick-carousel/slick/slick-theme.css';\n\nModal.setAppElement('#root');\n\nclass ContactEdit extends Component {\n  state = {\n    name: this.props.contact.name,\n    role: this.props.contact.role,\n    address: this.props.contact.address,\n    companyName: this.props.contact.company.name,\n    companyAddress: this.props.contact.company.address,\n    companyPhone: this.props.contact.company.phone\n  };\n\n  onChange = ({ target }) => {\n    const field = target.name;\n    const value = target.type === 'number' ? +target.value : target.value;\n    this.setState({ [field]: value });\n  };\n\n  onSumbit = (e) => {\n    e.preventDefault();\n    const {\n      name,\n      role,\n      address,\n      companyName,\n      companyAddress,\n      companyPhone\n    } = this.state;\n    const updatedContact = {\n      id: this.props.contact.id,\n      name,\n      role,\n      address,\n      company: {\n        name: companyName,\n        address: companyAddress,\n        phone: companyPhone\n      },\n      img: this.props.contact.img\n    };\n    this.props.saveContact(updatedContact);\n    this.props.onClose();\n  };\n\n  render() {\n    const { openModal, onClose, contact } = this.props;\n    const {\n      name,\n      role,\n      address,\n      companyName,\n      companyAddress,\n      companyPhone\n    } = this.state;\n    return (\n      <Modal\n        isOpen={openModal}\n        onRequestClose={() => onClose()}\n        className={'modal'}\n        overlayClassName={'overlay'}\n      >\n        <form onSubmit={this.onSumbit} className='form-container'>\n          <img src={contact.img} alt='contact-thumb' />\n          <input\n            type='text'\n            name='name'\n            placeholder='Contact Name'\n            value={name}\n            onChange={this.onChange}\n          />\n          <input\n            type='text'\n            name='role'\n            placeholder='Contact Role'\n            value={role}\n            onChange={this.onChange}\n          />\n          <input\n            type='text'\n            name='address'\n            placeholder='Contact Address'\n            value={address}\n            onChange={this.onChange}\n          />\n          <input\n            type='text'\n            name='companyName'\n            placeholder='Contact Company Name'\n            value={companyName}\n            onChange={this.onChange}\n          />\n          <input\n            type='text'\n            name='companyAddress'\n            placeholder='Contact Company Address'\n            value={companyAddress}\n            onChange={this.onChange}\n          />\n          <input\n            type='text'\n            name='companyPhone'\n            placeholder='Contact Company Phone'\n            value={companyPhone}\n            onChange={this.onChange}\n          />\n          <button type='submit' className='btn'>\n            Update\n          </button>\n        </form>\n      </Modal>\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  saveContact\n};\n\nexport default connect(null, mapDispatchToProps)(ContactEdit);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { saveContact } from '../../store/actions';\nimport Modal from 'react-modal';\n\nimport 'slick-carousel/slick/slick.css';\nimport 'slick-carousel/slick/slick-theme.css';\n\nModal.setAppElement('#root');\n\nclass ContactEdit extends Component {\n  state = {\n    name: '',\n    role: '',\n    address: '',\n    companyName: '',\n    companyAddress: '',\n    companyPhone: ''\n  };\n\n  onChange = ({ target }) => {\n    const field = target.name;\n    const value = target.type === 'number' ? +target.value : target.value;\n    this.setState({ [field]: value });\n  };\n\n  onSumbit = (e) => {\n    e.preventDefault();\n    const {\n      name,\n      role,\n      address,\n      companyName,\n      companyAddress,\n      companyPhone\n    } = this.state;\n    const newContact = {\n      name,\n      role,\n      address,\n      company: {\n        name: companyName,\n        address: companyAddress,\n        phone: companyPhone\n      }\n    };\n    this.props.saveContact(newContact);\n    this.props.onClose();\n  };\n\n  render() {\n    const { openModal, onClose } = this.props;\n    const {\n      name,\n      role,\n      address,\n      companyName,\n      companyAddress,\n      companyPhone\n    } = this.state;\n    return (\n      <Modal\n        isOpen={openModal}\n        onRequestClose={() => onClose()}\n        className={'modal'}\n        overlayClassName={'overlay'}\n      >\n        <form onSubmit={this.onSumbit} className='form-container'>\n          <img\n            src='https://cdn.pixabay.com/photo/2016/08/08/09/17/avatar-1577909_1280.png'\n            alt='contact-thumb'\n          />\n\n          <input\n            type='text'\n            name='name'\n            placeholder='Contact Name'\n            value={name}\n            onChange={this.onChange}\n          />\n          <input\n            type='text'\n            name='role'\n            placeholder='Contact Role'\n            value={role}\n            onChange={this.onChange}\n          />\n          <input\n            type='text'\n            name='address'\n            placeholder='Contact Address'\n            value={address}\n            onChange={this.onChange}\n          />\n          <input\n            type='text'\n            name='companyName'\n            placeholder='Contact Company Name'\n            value={companyName}\n            onChange={this.onChange}\n          />\n          <input\n            type='text'\n            name='companyAddress'\n            placeholder='Contact Company Address'\n            value={companyAddress}\n            onChange={this.onChange}\n          />\n          <input\n            type='text'\n            name='companyPhone'\n            placeholder='Contact Company Phone'\n            value={companyPhone}\n            onChange={this.onChange}\n          />\n          <button type='submit' className='btn'>\n            Add Contact\n          </button>\n        </form>\n      </Modal>\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  saveContact\n};\n\nexport default connect(null, mapDispatchToProps)(ContactEdit);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { loadContacts, removeContact } from '../../store/actions';\n\nimport ContactList from '../contact/ContactList';\nimport ContactEdit from '../contact/ContactEdit';\nimport ContactAdd from '../contact/ContactAdd';\n\nclass ContactApp extends Component {\n  state = { openModal: false, currContact: null };\n\n  async componentDidMount() {\n    await this.props.loadContacts();\n  }\n\n  onDelete = (id) => {\n    this.props.removeContact(id);\n    this.forceUpdate();\n  };\n\n  onEdit = (contact) => {\n    this.setState({ openModal: true, currContact: contact });\n  };\n\n  onClose = () => {\n    this.setState({ openModal: false, currContact: null });\n  };\n\n  onAdd = () => {\n    this.setState({ openModal: true });\n  };\n\n  render() {\n    const { contacts } = this.props;\n    const { openModal, currContact } = this.state;\n    return (\n      <>\n        {!contacts.length ? (\n          'Loading Contacts'\n        ) : (\n          <ContactList\n            contacts={contacts}\n            onDelete={this.onDelete}\n            onEdit={this.onEdit}\n            onAdd={this.onAdd}\n          />\n        )}\n        {currContact !== null && (\n          <ContactEdit\n            openModal={openModal}\n            onClose={this.onClose}\n            contact={currContact}\n          />\n        )}\n        <ContactAdd openModal={openModal} onClose={this.onClose} />\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  contacts: state.contactApp.contacts\n});\n\nconst mapDispatchToProps = {\n  loadContacts,\n  removeContact\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactApp);\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nimport ContactApp from './components/pages/ContactApp';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <ContactApp />\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport './style/style.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}